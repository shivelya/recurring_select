//= require bootstrap-datetimepicker

window.RecurringSelectDialog =
  class RecurringSelectDialog
    constructor: (@recurring_selector, start_date) ->
      @current_rule = @recurring_selector.recurring_select('current_rule')
      @initDialogBox(start_date)
      if not @current_rule.hash? or not @current_rule.hash.rule_type?
        @freqChanged()
      else
        setTimeout @positionDialogVert, 10 # allow initial render

    initDialogBox: (start_date) ->
      $(".modal").remove()

      open_in = $("body")
      open_in = $(".ui-page-active") if $(".ui-page-active").length
      open_in.append @template()
      @outer_holder = $(".modal")
      @outer_holder.modal()
      @content = @outer_holder.find ".modal-body"
      @positionDialogVert(true)
      @mainEventInit()
      @summaryInit()
      @freqInit()
      @freq_select.focus()
      @outer_holder.trigger "recurring_select:dialog_opened"
      @start_date = start_date

    positionDialogVert: (initial_positioning) =>
      @outer_holder.trigger "recurring_select:dialog_positioned"

    cancel: (event) =>
      if event.target != event.currentTarget
        return
      @outer_holder.remove()
      @recurring_selector.recurring_select('cancel')

    save: =>
      return if !@current_rule.str?
      @outer_holder.modal('hide')
      @outer_holder.remove()
      @recurring_selector.recurring_select('save', @current_rule)

# ========================= Init Methods ===============================

    mainEventInit: ->
      # Tap hooks are for jQueryMobile
      $('#myModal').on('hide.bs.modal', @cancel)
      @save_button = @outer_holder.find('button.rs_save').on "click tap", @save

    freqInit: ->
      @freq_select = @outer_holder.find ".rs_frequency"
      if @current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?
        if rule_type.search(/Weekly/) != -1
          @freq_select.prop('selectedIndex', 1)
          @initWeeklyOptions()
        else if rule_type.search(/Monthly/) != -1
          @freq_select.prop('selectedIndex', 2)
          @initMonthlyOptions()
        else if rule_type.search(/Yearly/) != -1
          @freq_select.prop('selectedIndex', 3)
          @initYearlyOptions()
        else
          @initDailyOptions()
      @initEndOptions()
      @freq_select.on "change", @freqChanged

    initEndOptions: ->
      section = @content.find('.end_options')
      section.find("input[name=end_interval_type]").on("change", @endIntervalChanged)
      ends_count_input = section.find('#ends_count_input')
      ends_count_input.val('1')
      ends_count_input.on('change keyup', @endCountChanged)
      ends_until_input = section.find('#ends_until_input')
      ends_until_input.val(new Date(Date.now()).toString('M/dd/yyyy'))

      if @current_rule.hash?
        ends_never = section.find('#ends_never')
        ends_never.prop('checked', !@current_rule.hash.until and !@current_rule.hash.count)

        ends_count = section.find('#ends_count')
        ends_count.prop('checked', @current_rule.hash.count?)
        if ends_count.prop('checked')
          ends_count_input.removeAttr('disabled')
          ends_count_input.val(@current_rule.hash.count)

        ends_until = section.find('#ends_until')
        ends_until.prop('checked', @current_rule.hash.until?)
        if ends_until.prop('checked')
          ends_until_input.removeAttr('disabled')
          @initDateTimePicker(Date.parse(@current_rule.hash.until))

    initDailyOptions: ->
      section = @content.find('.daily_options')
      interval_input = section.find('.rs_daily_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()

    initWeeklyOptions: ->
      section = @content.find('.weekly_options')

      # connect the interval field
      interval_input = section.find('.rs_weekly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged

      # connect the day fields
      if @current_rule.hash.validations? && @current_rule.hash.validations.day?
        $(@current_rule.hash.validations.day).each (index, val) ->
          section.find(".day_holder a[data-value='"+val+"']").addClass("selected")
      section.on "click", ".day_holder a", @daysChanged

      section.show()

    initMonthlyOptions: ->
      section = @content.find('.monthly_options')
      interval_input = section.find('.rs_monthly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged

      @current_rule.hash.validations ||= {}
      @current_rule.hash.validations.day_of_month ||= []
      @current_rule.hash.validations.day_of_week ||= {}
      @init_calendar_days(section)
      @init_calendar_weeks(section)

      in_week_mode = Object.keys(@current_rule.hash.validations.day_of_week).length > 0
      section.find(".monthly_rule_type_week").prop("checked", in_week_mode)
      section.find(".monthly_rule_type_day").prop("checked", !in_week_mode)

      week_mode = @content.find(".monthly_rule_type_week").prop("checked")
      @content.find(".rs_calendar_week").toggle(week_mode)
      @content.find(".rs_calendar_day").toggle(!week_mode)

      section.find("input[name=monthly_rule_type]").on "change", @toggle_month_view
      section.show()

    initYearlyOptions: ->
      section = @content.find('.yearly_options')
      interval_input = section.find('.rs_yearly_interval')
      interval_input.val(@current_rule.hash.interval)
      interval_input.on "change keyup", @intervalChanged
      section.show()


    summaryInit: ->
      @summary = @outer_holder.find(".rs_summary")
      @summaryUpdate()

# ========================= render methods ===============================

    summaryUpdate: (new_string) =>
      if @current_rule.hash? && @current_rule.str?
        @summary.removeClass "fetching"
        @save_button.removeClass("disabled")
        rule_str = @current_rule.str.replace("*", "")
        rule_str = "#{$.fn.recurring_select.texts["summary"]}: "+rule_str
        @summary.find("span").html rule_str
      else
        @summary.addClass "fetching"
        @save_button.addClass("disabled")
        @summary.find("span").html ""
        @summaryFetch()

    summaryFetch: ->
      return if !(@current_rule.hash? && (rule_type = @current_rule.hash.rule_type)?)
      $.ajax
        url: "/recurring_select/translate",
        type: "POST",
        data: @current_rule.hash
        success: @summaryFetchSuccess

    summaryFetchSuccess: (data) =>
      @current_rule.str = data
      @summaryUpdate()
      @content.css {"width": "auto"}

    init_calendar_days: (section) =>
      monthly_calendar = section.find(".rs_calendar_day")
      monthly_calendar.html ""
      for num in [1..31]
        monthly_calendar.append (day_link = $(document.createElement("a")).text(num))
        if $.inArray(num, @current_rule.hash.validations.day_of_month) != -1
          day_link.addClass("selected")

      # add last day of month button
      monthly_calendar.append (end_of_month_link = $(document.createElement("a")).text($.fn.recurring_select.texts["last_day"]))
      end_of_month_link.addClass("end_of_month")
      if $.inArray(-1, @current_rule.hash.validations.day_of_month) != -1
        end_of_month_link.addClass("selected")

      monthly_calendar.find("a").on "click tap", @dateOfMonthChanged

    init_calendar_weeks: (section) =>
      monthly_calendar = section.find(".rs_calendar_week")
      monthly_calendar.html ""
      row_labels = $.fn.recurring_select.texts["order"]
      cell_str = $.fn.recurring_select.texts["days_first_letter"]

      for num in [1..4]
        monthly_calendar.append "<span>#{row_labels[num - 1]}</span>"
        for day_of_week in [0..6]
          day_link = $("<a>", {text: cell_str[day_of_week]})
          day_link.attr("day", day_of_week)
          day_link.attr("instance", num)
          monthly_calendar.append day_link
      $.each @current_rule.hash.validations.day_of_week, (key, value) ->
        $.each value, (index, instance) ->
          section.find("a[day='#{key}'][instance='#{instance}']").addClass("selected")
      monthly_calendar.find("a").on "click tap", @weekOfMonthChanged

    toggle_month_view: =>
      week_mode = @content.find(".monthly_rule_type_week").prop("checked")
      @current_rule.str = null
      @current_rule.hash.validations = null
      @content.find(".rs_calendar_week").toggle(week_mode)
      @content.find(".rs_calendar_day").toggle(!week_mode)
      if week_mode
        @content.find('.rs_calendar_day a.selected').removeClass('selected')
      else
        @content.find('.rs_calendar_week a.selected').removeClass('selected')
      @summaryUpdate()

# ========================= Change callbacks ===============================

    freqChanged: =>
      @resetEvents()
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.interval = 1
      @current_rule.hash.validations = null
      @content.find(".freq_option_section").hide();
      @content.find(".monthly_options input[type=radio]").prop("checked", false)
      @content.find(".weekly_options .day_holder a").removeClass("selected")
      switch @freq_select.val()
        when "Weekly"
          @current_rule.hash.rule_type = "IceCube::WeeklyRule"
          @initWeeklyOptions()
        when "Monthly"
          @current_rule.hash.rule_type = "IceCube::MonthlyRule"
          @initMonthlyOptions()
        when "Yearly"
          @current_rule.hash.rule_type = "IceCube::YearlyRule"
          @initYearlyOptions()
        else
          @current_rule.hash.rule_type = "IceCube::DailyRule"
          @initDailyOptions()
      @summaryUpdate()
      @positionDialogVert()

    resetEvents: ->
      interval_input = @content.find('.daily_options .rs_daily_interval')
      interval_input.off "change keyup", @intervalChanged

      section = @content.find('.weekly_options')
      interval_input = section.find('.rs_weekly_interval')
      interval_input.off "change keyup", @intervalChanged
      section.off "click", ".day_holder a", @daysChanged

      section = @content.find('.monthly_options')
      interval_input = section.find('.rs_monthly_interval')
      interval_input.off "change keyup", @intervalChanged
      section.find("input[name=monthly_rule_type]").off "change", @toggle_month_view

      monthly_calendar = section.find(".rs_calendar_day")
      monthly_calendar.find("a").off "click tap", @dateOfMonthChanged

      monthly_calendar = section.find(".rs_calendar_week")
      monthly_calendar.find("a").off "click tap", @weekOfMonthChanged

      interval_input = @content.find('.year_options .rs_yearly_interval')
      interval_input.off "change keyup", @intervalChanged

    endIntervalChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.until = null
      @current_rule.hash.count = null

      section = @content.find('.end_options')
      pickerElement = section.find('.datetime-picker')
      datepicker = pickerElement.data('datetimepicker')
      if datepicker?
        prevDate = datepicker.getLocalDate()
        pickerElement.off('changedate')
        datepicker.destroy()

      ends_count = section.find('#ends_count')
      ends_count_input = section.find('#ends_count_input')
      if event.currentTarget.id == ends_count[0].id
        @current_rule.hash.count = parseInt(ends_count_input.val())
        ends_count_input.removeAttr('disabled')
      else
        ends_count_input.attr('disabled', '')

      ends_until = section.find('#ends_until')
      ends_until_input = section.find('#ends_until_input')
      if event.currentTarget.id == ends_until[0].id
        datepicker = @initDateTimePicker(prevDate)
        @current_rule.hash.until = datepicker.getLocalDate()
        ends_until_input.removeAttr('disabled')
      else
        ends_until_input.attr('disabled', '')

      @summaryUpdate()

    initDateTimePicker: (prevDate) ->
      pickerElement = @content.find('.end_options .datetime-picker')
      pickerElement.datetimepicker({
        language: 'en',
        pick12HourFormat: true,
        pickSeconds: false,
        pickTime: false,
        disabled: true,
        startDate: new Date(@start_date)
      })
      datepicker = pickerElement.data('datetimepicker')
      pickerElement.on('changeDate', @endUntilChanged)
      if prevDate?
        datepicker.setDate(prevDate)
      datepicker

    endCountChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash.count = parseInt(@content.find('#ends_count_input').val())
      @summaryUpdate()

    endUntilChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash.until = @content.find('.datetime-picker').data('datetimepicker').getLocalDate()
      @summaryUpdate()

    intervalChanged: (event) =>
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.interval = parseInt($(event.currentTarget).val())
      if @current_rule.hash.interval < 1 || isNaN(@current_rule.hash.interval)
        @current_rule.hash.interval = 1
        # $(event.currentTarget).val(@current_rule.hash.interval)
      @summaryUpdate()

    daysChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".day_holder a.selected").map -> parseInt($(this).data("value"))
      @current_rule.hash.validations.day = raw_days.get()
      @summaryUpdate()
      false # this prevents default and propogation

    dateOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      raw_days = @content.find(".monthly_options .rs_calendar_day a.selected").map ->
        res = if $(this).text() == $.fn.recurring_select.texts["last_day"] then -1 else parseInt($(this).text())
        res
      @current_rule.hash.validations.day_of_week = {}
      @current_rule.hash.validations.day_of_month = raw_days.get()
      @summaryUpdate()
      false

    weekOfMonthChanged: (event) =>
      $(event.currentTarget).toggleClass("selected")
      @current_rule.str = null
      @current_rule.hash ||= {}
      @current_rule.hash.validations = {}
      @current_rule.hash.validations.day_of_month = []
      @current_rule.hash.validations.day_of_week = {}
      @content.find(".monthly_options .rs_calendar_week a.selected").each (index, elm) =>
        day = parseInt($(elm).attr("day"))
        instance = parseInt($(elm).attr("instance"))
        @current_rule.hash.validations.day_of_week[day] ||= []
        @current_rule.hash.validations.day_of_week[day].push instance
      @summaryUpdate()
      false

# ========================= Change callbacks ===============================

    template: () ->
      str = "
      <div id='myModal' class='modal' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='true'>
        <div class='modal-dialog' style='width: 300px;'>
        <div class='modal-content'>
        <div class='modal-header'>
          <button type='button' class='close' data-dismiss='modal' aria-hidden='true' title='#{$.fn.recurring_select.texts["cancel"]}'>&times;</button>
          <h3 id='myModalLabel'>#{$.fn.recurring_select.texts["repeat"]}</h3>
        </div>
        <div class='modal-body' style='max-height: 500px'>
          <p>
            <label for='rs_frequency'>#{$.fn.recurring_select.texts["frequency"]}:</label>
            <select id='rs_frequency' class='rs_frequency form-control' name='rs_frequency'>
              <option value='Daily'>#{$.fn.recurring_select.texts["daily"]}</option>
              <option value='Weekly'>#{$.fn.recurring_select.texts["weekly"]}</option>
              <option value='Monthly'>#{$.fn.recurring_select.texts["monthly"]}</option>
              <option value='Yearly'>#{$.fn.recurring_select.texts["yearly"]}</option>
            </select>
          </p>

          <div class='daily_options freq_option_section'>
            <p>
              #{$.fn.recurring_select.texts["every"]}
              <input type='text' name='rs_daily_interval' class='rs_daily_interval rs_interval' value='1' size='2' />
              #{$.fn.recurring_select.texts["days"]}
            </p>
          </div>
          <div class='weekly_options freq_option_section'>
            <p>
              #{$.fn.recurring_select.texts["every"]}
              <input type='text' name='rs_weekly_interval' class='rs_weekly_interval rs_interval' value='1' size='2' />
              #{$.fn.recurring_select.texts["weeks_on"]}:
            </p>
            <div class='day_holder'>
      "
      for day_of_week in [$.fn.recurring_select.texts["first_day_of_week"]...(7 + $.fn.recurring_select.texts["first_day_of_week"])]
        day_of_week = day_of_week % 7
        str += "<a href='#' data-value='#{day_of_week}'>#{$.fn.recurring_select.texts["days_first_letter"][day_of_week]}</a>"

      str += "
            </div>
            <span style='clear:both; visibility:hidden; height:1px;'>.</span>
          </div>
          <div class='monthly_options freq_option_section'>
            <p>
              #{$.fn.recurring_select.texts["every"]}
              <input type='text' name='rs_monthly_interval' class='rs_monthly_interval rs_interval' value='1' size='2' />
              #{$.fn.recurring_select.texts["months"]}:
            </p>
            <p class='monthly_rule_type'>
              <label class='radio-inline'>
                <input type='radio' class='monthly_rule_type_day' name='monthly_rule_type' value='true' />
                #{$.fn.recurring_select.texts["day_of_month"]}
              </label>
              <label class='radio-inline'>
                <input type='radio' class='monthly_rule_type_week' name='monthly_rule_type' value='true' />
                #{$.fn.recurring_select.texts["day_of_week"]}
              </label>
            </p>
            <p class='rs_calendar_day'></p>
            <p class='rs_calendar_week'></p>
          </div>
          <div class='yearly_options freq_option_section'>
            <p>
              #{$.fn.recurring_select.texts["every"]}
              <input type='text' name='rs_yearly_interval' class='rs_yearly_interval rs_interval' value='1' size='2' />
              #{$.fn.recurring_select.texts["years"]}
            </p>
          </div>
          <div class='end_options'>
            <label>Ends:</label>
            <label class='radio'>
              <input type='radio' id='ends_never' name='end_interval_type' aria-label='Ends never' title='Ends never' checked>
              Never
            </label>
            <label class='radio'>
              <input type='radio' id='ends_count' name='end_interval_type' aria-label='Ends after a number of occurrences' title='Ends after a number of occurrences'>
              After
              <input id='ends_count_input' style='width: 40px' type='text' size='3' value='' disabled='' title='Occurrences'>
              occurrences
            </label>
              <input type='radio' id='ends_until' name='end_interval_type' aria-label='Ends on a specified date' title='Ends on a specified date'>
              On
              <div class='input-group datetime-picker'>
                <input class='form-control' data-format='MM/dd/yyyy' id='ends_until_input' type='text' size='10' disabled title='Specified date' autocomplete='off'>
                <span class='input-group-addon'>
                  <i class='fa fa-calendar' data-date-icon='fa-calendar' data-time-icon='fa-time'/>
                </span>
              </div>
          </div>
          <p class='rs_summary'>
            <span></span>
          </p>
        </div>
        <div class='modal-footer'>
          <button class='btn btn-primary rs_save'>#{$.fn.recurring_select.texts["ok"]}</button>
          <button class='btn rs_cancel' data-dismiss='modal' aria-hidden='true'>#{$.fn.recurring_select.texts["cancel"]}</button>
        </div>
        </div>
        </div>
      </div>
      "
